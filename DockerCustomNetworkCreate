=>   docker network create --help
  
          Usage:  docker network create [OPTIONS] NETWORK
        
          Create a network
        
          Options:
              --attachable           Enable manual container attachment
              --aux-address map      Auxiliary IPv4 or IPv6 addresses used by
                                     Network driver (default map[])
              --config-from string   The network from which to copy the configuration
              --config-only          Create a configuration only network
          -d, --driver string        Driver to manage the Network (default "bridge")
              --gateway strings      IPv4 or IPv6 Gateway for the master subnet
              --ingress              Create swarm routing-mesh network
              --internal             Restrict external access to the network
              --ip-range strings     Allocate container ip from a sub-range
              --ipam-driver string   IP Address Management Driver (default "default")
              --ipam-opt map         Set IPAM driver specific options (default map[])
              --ipv6                 Enable IPv6 networking
              --label list           Set metadata on a network
          -o, --opt map              Set driver specific options (default map[])
              --scope string         Control the network's scope
              --subnet strings       Subnet in CIDR format that represents a
                                     network segment


=>  docker network create -d bridge docker_network
=>  docker network create -d bridge docker_network_2

            şeklinde komut vererek kendimiz custom bir network bileşeni oluşturuyoruz.


=>  docker network ls
            
NETWORK ID     NAME             DRIVER    SCOPE
ae81cc7ed928   bridge           bridge    local
51f14eceb2e3   docker_network   bridge    local
445f14erdfd3   docker_network_2   bridge    local
5ccda2524e18   host             host      local
e782ef5873df   none             null      local

            oluştrduğumuz custom network bileşenimizi bu şekilde görebiliriz.

            

=> docker container run -p 1111:80 -d --network docker_network --name Nginx_Container_1 nginx    
=> docker container run -p 2222:80 -d --network docker_network --name Nginx_Container_2 nginx    
=> docker container run -p 3333:80 -d --network docker_network_2 --name Nginx_Container_3 nginx    
=> docker container run -p 4444:80 -d --network docker_network_2 --name Nginx_Container_4 nginx

=> docker ps -a
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES
2596ea4e9536   nginx     "/docker-entrypoint.…"   10 seconds ago   Up 9 seconds    0.0.0.0:4444->80/tcp   Nginx_Container_4
90a7db8fda4c   nginx     "/docker-entrypoint.…"   26 seconds ago   Up 24 seconds   0.0.0.0:3333->80/tcp   Nginx_Container_3
e917286abf53   nginx     "/docker-entrypoint.…"   11 minutes ago   Up 11 minutes   0.0.0.0:2222->80/tcp   Nginx_Container_2
606c8db7721f   nginx     "/docker-entrypoint.…"   11 minutes ago   Up 11 minutes   0.0.0.0:1111->80/tcp   Nginx_Container_1


Docker_network_2 içeriğine bir göz atalım .... 
  
=> docker network inspect docker_network_2
[
    {
        "Name": "docker_network_2",
        "Id": "9044c4534eac2047d7901959d12e884cdf0f360affb2f1d927f6b9225540d08a",
        "Created": "2023-08-06T17:17:29.318126852Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "2596ea4e9536d988ac6fb0c2720f57d00a98aed99bbbb864c900a8c876b65583": {
                "Name": "Nginx_Container_4",
                "EndpointID": "d57c6a99b2ab003a9c17f9cf1814f983cd3c4af9796a36ede050a2cdb2d5b882",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "90a7db8fda4cb915d3eba61f303bfe364099a83d481e60229bb8aa643edef15c": {
                "Name": "Nginx_Container_3",
                "EndpointID": "d5572e6d4b423dd84cf523f202c1faa77027965cada589b4e2ce45aee723a83f",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]

Docker container [OPTIONS] IMAGE [COMMAND] [ARG…] syntaxi içindeki command kısmında Nginx_Container_3 üzerinde bir ping paketi olmadığı için bash komutunu kullanarak ilgili paketi indirip kuruyoruz.
  
=>   docker container exec -ti  Nginx_Container_3 bash
  # apt-get update 
=>   docker container exec -ti  Nginx_Container_4 bash
  # apt-get update 



  

  
